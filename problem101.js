// Optimum polynomial
// ------------------
// Problem 101
// -----------
// If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of
// the next term, as there are infinitely many polynomial functions that can model the sequence.

// As an example, let us consider the sequence of cube numbers. This is defined by the generating function, 
// un = n^3: 1, 8, 27, 64, 125, 216, ...

// Suppose we were only given the first two terms of this sequence. Working on the principle that "simple is best" we
// should assume a linear relationship and predict the next term to be 15 (common difference 7).
// Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship
// should be assumed.

// We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a
// sequence. It should be clear that OP(k, n) will accurately generate the terms of the sequence for n ≤ k, and
// potentially the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP).

// As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy;
// that is, for n ≥ 2, OP(1, n) = u1.

// Hence we obtain the following OPs for the cubic sequence:

// OP(1, n) = 1	            1, [1], 1, 1, ...
// OP(2, n) = 7n−6	        1, 8, [15], ...
// OP(3, n) = 6n^2−11n+6    1, 8, 27, [58], ...
// OP(4, n) = n^3	        1, 8, 27, 64, 125, ...
// Clearly no BOPs exist for k ≥ 4.

// By considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74.

// Consider the following tenth degree polynomial generating function:

// un = 1 − n + n^2 − n^3 + n^4 − n^5 + n^6 − n^7 + n^8 − n^9 + n^10

// Find the sum of FITs for the BOPs.

function format(values)
{
    let power = values.length-1;
    let s = "un =";
    let first = true;

    for (let c of values)
    {
        s += " ";
        if (first && c >= 0)
            s += c;
        else if (c >= 0)
            s += "+ "+c;
        else
            s += "- "+(-c);

        if (power > 1)
            s += "*x^" + power;
        else if (power > 0)
            s += "*x";

        power--;
        first = false;
    }

    return s;
}

function *UN()
{
    let n = 0;

    while (true)
    {
        let n1 = n;
        let n2 = n1 * n;
        let n3 = n2 * n;
        let n4 = n3 * n;
        let n5 = n4 * n;
        let n6 = n5 * n;
        let n7 = n6 * n;
        let n8 = n7 * n;
        let n9 = n8 * n;
        let n10= n9 * n;

        let v = 1 - n1 + n2 - n3 + n4 - n5 + n6 - n7 + n8 - n9 + n10;

        if (v > Number.MAX_SAFE_INTEGER)
            break;

        yield v;

        n = n+1;
    }
}

function OP1()
{
    let A = 1;

    let good = format([A]) + " =>";

    for (let u of UN())
    {
        if (A !== u)
        {
            console.log(good,"Bad =>", A);
            return A;
        }

        good += " "+A;
    }
}

function OP2()
{
    return OP1();
}

function OP3()
{
    let A = 341, B = -1023, C = 683;
    let x = 1;

    let good = format([A, B, C]) + " =>";

    for (let u of UN())
    {
        let n = A*x*x + B*x + C;

        if (n !== u)
        {
            console.log(good,"Bad =>", n);
            return n;
        }

        good += " "+n;
        x++;
    }
}

function OP4()
{
    let A = 7040;
    let B = -41899;
    let C = 76417;
    let D = -41557;
    let x = 1;

    let good = format([A, B, C, D]) + " =>";

    for (let u of UN())
    {
        let x2 = x*x;
        let x3 = x*x2;
        let n = A*x3 + B*x2 + C*x + D;

        if (n !== u)
        {
            console.log(good,"Bad =>", n);
            return n;
        }

        good += " "+n;
        x++;
    }
}

function OP5()
{
    let e = 27742;
    let d = 7040-6*e;
    let c = (7040+341) - 13*e - 4*d
    let b = -(e+d+c)
    let a = 1;

    let x = 1;
    let good = format([e, d, c, b, a]);

    for (let u of UN())
    {
        let x2 = x*x;
        let x3 = x*x2;
        let x4 = x*x3;

        let n = e*x4 + d*x3 + c*x2 + b*x + a;

        if (n !== u)
            return n;

        x++;
    }
}

// d+c+b = 0
// x=1 => d + c + b = 0 => b = 13739
// x=2 => 3d + c = 341 => c = -20779
// x=3 => d + 3d + c = 7381 => d = 7040
// 0 : 1
// 1 : 1
// 2 : 683
// 3 : 44287

let count = 0;
for (let u of UN())
{
    console.log(count, ':', u);
    count++;
    if (count === 10)
        break;
}

OP1();
OP2();
OP3();
OP4();

console.log('Done');